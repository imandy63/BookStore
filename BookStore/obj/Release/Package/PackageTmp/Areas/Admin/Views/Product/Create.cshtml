@model BookStore.Models.Product
@{
    ViewBag.Title = "Create";
}

<div class="p-4 my-4 mx-2">
    <h2 class="text-2xl font-bold  my-4">Create Product</h2>

    @using (Html.BeginForm("Create", "Product", FormMethod.Post, new { @class = "flex flex-wrap justify-center gap-10", enctype = "multipart/form-data" }))
    {
        <div class="border-2 border-black relative w-[300px] h-[300px]">
            <div class="absolute -top-[15px] -right-[15px] z-10">
                <label for="imageUpload" class=" w-[30px] h-[30px] flex justify-center bg-white items-center border-black border rounded-full hover:bg-black hover:text-white duration-300 cursor-pointer p-0">
                    <i class="fa-regular fa-pen-to-square"></i>
                </label>
                <input type='file' name="imageUpload" id="imageUpload" class="hidden" accept=".png, .jpg, .jpeg" />
            </div>
            <div id="imagePreview" class="bg-[url(/img/noImageProduct.jpg)] relative w-full h-full bg-cover bg-center"></div>
            @Html.ValidationMessage("Image")
        </div>
        <div>
            <div class="flex gap-10">
                <div class="my-4">
                    @Html.LabelFor(temp => temp.Name, new { @class = "text-black my-1 block font-normal" })
                    @Html.TextBoxFor(temp => temp.Name, new { @class = "block p-2 border w-full h-[36px] focus:border-[rgb(200,200,200)] hover:border-[rgb(200,200,200)] outline-none" })
                    @Html.ValidationMessageFor(temp => temp.Name)
                </div>
                <div class="my-4">
                    @Html.LabelFor(temp => temp.AuthorName, new { @class = "text-black my-1 block font-normal" })
                    @Html.TextBoxFor(temp => temp.AuthorName, new { @class = "block p-2 border w-full h-[36px] focus:border-[rgb(200,200,200)] hover:border-[rgb(200,200,200)] outline-none" })
                    @Html.ValidationMessageFor(temp => temp.AuthorName)
                </div>
            </div>
            <div class="flex gap-10">
                <div class="my-4">
                    @Html.LabelFor(temp => temp.Price, new { @class = "text-black my-1 block font-normal" })
                    @Html.TextBoxFor(temp => temp.Price, new { type="number", @class = "block p-2 border w-full h-[36px] focus:border-[rgb(200,200,200)] hover:border-[rgb(200,200,200)] outline-none" })
                    @Html.ValidationMessageFor(temp => temp.Price)
                </div>
                <div class="my-4">
                    @Html.LabelFor(temp => temp.Quantity, new { @class = "text-black my-1 block font-normal" })
                    @Html.TextBoxFor(temp => temp.Quantity, new { type="number", @class = "block p-2 border w-full h-[36px] focus:border-[rgb(200,200,200)] hover:border-[rgb(200,200,200)] outline-none" })
                    @Html.ValidationMessageFor(temp => temp.Quantity)
                </div>
            </div>
            <div class="my-4">
                @Html.LabelFor(temp => temp.GenreId, "Thể loại", new { @class = "text-black my-1 block font-normal" })
                @Html.DropDownListFor(temp => temp.GenreId, new SelectList(ViewBag.Genres, "GenreId", "Name"), new {@class = "bg-gray-50 border border-gray-300 text-gray-900 text-sm focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" })
                @Html.ValidationMessageFor(temp => temp.GenreId)
            </div>
            <div class="flex justify-end " >
                <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2">Tạo sản phẩm</button>
            </div>
        </div>
    }
</div>

<script>
    const preview = document.getElementById("imagePreview");
   
    function clearFileInput(ctrl) {
        try {
            ctrl.value = null;
        } catch (ex) { }
        if (ctrl.value) {
            ctrl.parentNode.replaceChild(ctrl.cloneNode(true), ctrl);
        }
    }
    function readURL(input) {
        console.log()
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                preview.style.backgroundImage = "url(" + e.target.result + ")"
            }
            reader.readAsDataURL(input.files[0]);
        }
    }
    
    document.getElementById("imageUpload").oninput = function () {
        readURL(this);
    }
</script>